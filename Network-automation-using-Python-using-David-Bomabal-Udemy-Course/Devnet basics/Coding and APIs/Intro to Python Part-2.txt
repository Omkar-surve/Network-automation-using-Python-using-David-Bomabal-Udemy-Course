Native Python data structures:

list 	[]	['a', 1, 18.2] 			Ordered list of items. Can be changed after created and can contain duplicate items.
tuple 	()	('a', 1, 18.2)			Just like list; but cannot be changed.
dict	{}	{"apples": 5, "pears": 2, "oranges": 9}	Key:value pairs. Keys cannot be changed, but we can change its value.

example:
>>> l = (100,20.2,'string')
>>> l[1]
20.2
>>> l[0]
100
>>> l[2]
'string'
>>> 

>>> z.append('string3')
>>> z
[100, 20.2, 'string', 'string3', 'string3']
>>> 

>>> d = {'R1':'10.0.0.1','R2':'10.0.0.2','R3':'10.0.0.3'}
>>> d['R1']
'10.0.0.1'

===================================================================================================================
Python Loops:

Iterative loops: 

For:
for individual_item in iterator:
    statements…

>>> names = ["chris", "iftach", "jay"]
>>> for name in names:
...     print(name)
...
chris
iftach
jay

>>> d = {'R1':'10.0.0.1','R2':'10.0.0.2','R3':'10.0.0.3'}
>>> for router in d.items():
...     print(router)
... 
('R1', '10.0.0.1')
('R2', '10.0.0.2')
('R3', '10.0.0.3')

We can use unpacking to unpack those (key, value) tuples that the .items() method returns into variable names of our choosing.

>>> d = {'R1':'10.0.0.1','R2':'10.0.0.2','R3':'10.0.0.3'}
>>> for router,ip in d.items():
...     print("Router {}={}".format(router,ip))
... 
Router R1=10.0.0.1
Router R2=10.0.0.2
Router R3=10.0.0.3
>>> 

Conditional loops:
While loop:

>>> i = 0
>>> while i < 5:
...     print(i)
...     i += 1
...
0
1
2
3
4

while True: is one of the more popular uses for while loops - for when you really do want to create an infinite loop.

>>> from time import sleep
>>> while True:
...     try:
...         print("Polling.")
...         # Poll some resource
...         sleep(1)
...     except KeyboardInterrupt:
...         break
...
Polling.
Polling.
Polling.

==============================================================================================================
Python script structure and execution:

Structure and Execution:
Flow:
1)  #!/usr/bin/env python		===> Shebang line
2) Module Docstrings: used for documenting about script or code.
3) Import Statements: Import other code into your script.
4) Module "Constants": 
5) Module-level "Global" Variables: Every function, module within the script will have read access.
6) Module Functions and Classes: 
7) The if __name__ == '__main__' Block:	: Some Python files could serve as both a script (to be executed) and a module (which could be imported). When a Python script is executed, it is given the internal __name__ of __main__ by the Python interpreter. All other modules, when they are imported by some calling script, will see their __name__ as their own module name. 


    The module_variable is created outside of any function or class.
    The local_variable is created inside a function.
    The argument_variable's name is defined as part of the function definition, but its value isn't assigned until the function is called.

=====================================================================================================================
Debugging basics:

stack trace	==> A stack trace shows the calling "stack" of statements all the way from the top-level script that is being executed down to the statement that has produced the error.

